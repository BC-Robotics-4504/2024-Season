
 

// This file is autogenerated. DO NOT EDIT

#pragma once
#include <robotpy_build.h>


#include <../../_impl/include/frc/controller/PIDController.h>




#include <rpygen/wpi__Sendable.hpp>

namespace rpygen {

using namespace frc2;

using frc2::PIDController;

template <typename CfgBase>
using PyTrampolineCfgBase_frc2__PIDController =
    PyTrampolineCfg_wpi__Sendable<
CfgBase
>;

template <typename CfgBase = EmptyTrampolineCfg>
struct PyTrampolineCfg_frc2__PIDController :
    PyTrampolineCfgBase_frc2__PIDController< CfgBase>
{
    using Base = frc2::PIDController;

    using override_base_InitSendable_RTSendableBuilder = frc2::PIDController;
};


template <typename PyTrampolineBase, typename PyTrampolineCfg>
using PyTrampolineBase_frc2__PIDController =
    PyTrampoline_wpi__Sendable<
        PyTrampolineBase
        
        , PyTrampolineCfg
    >
;

template <typename PyTrampolineBase, typename PyTrampolineCfg>
struct PyTrampoline_frc2__PIDController : PyTrampolineBase_frc2__PIDController<PyTrampolineBase, PyTrampolineCfg> {
    using PyTrampolineBase_frc2__PIDController<PyTrampolineBase, PyTrampolineCfg>::PyTrampolineBase_frc2__PIDController;



#ifndef RPYGEN_DISABLE_InitSendable_RTSendableBuilder
    void InitSendable(wpi::SendableBuilder& builder) override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_InitSendable_RTSendableBuilder;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "initSendable", builder);
        return CxxCallBase::InitSendable(std::forward<decltype(builder)>(builder));
    }
#endif




};

}; // namespace rpygen
