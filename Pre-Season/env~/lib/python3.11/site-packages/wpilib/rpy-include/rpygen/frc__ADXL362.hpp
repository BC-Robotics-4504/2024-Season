
 

// This file is autogenerated. DO NOT EDIT

#pragma once
#include <robotpy_build.h>


#include <../_impl/include/frc/ADXL362.h>

#include <networktables/NTSendableBuilder.h>
#include <frc/DigitalSource.h>

#define RPYGEN_DISABLE_SetRange_TRange


#include <rpygen/frc__Accelerometer.hpp>
#include <rpygen/nt__NTSendable.hpp>

namespace rpygen {

using namespace frc;


template <typename CfgBase>
using PyTrampolineCfgBase_frc__ADXL362 =
    PyTrampolineCfg_frc__Accelerometer<
    PyTrampolineCfg_nt__NTSendable<
CfgBase
>>;

template <typename CfgBase = EmptyTrampolineCfg>
struct PyTrampolineCfg_frc__ADXL362 :
    PyTrampolineCfgBase_frc__ADXL362< CfgBase>
{
    using Base = frc::ADXL362;

    using override_base_GetX_v = frc::ADXL362;
    using override_base_GetY_v = frc::ADXL362;
    using override_base_GetZ_v = frc::ADXL362;
    using override_base_GetAcceleration_TAxes = frc::ADXL362;
    using override_base_GetAccelerations_v = frc::ADXL362;
    using override_base_InitSendable_RTNTSendableBuilder = frc::ADXL362;
};


template <typename PyTrampolineBase, typename PyTrampolineCfg>
using PyTrampolineBase_frc__ADXL362 =
    PyTrampoline_frc__Accelerometer<
    PyTrampoline_nt__NTSendable<
        PyTrampolineBase
        
        , PyTrampolineCfg
    >
        
        , PyTrampolineCfg
    >
;

template <typename PyTrampolineBase, typename PyTrampolineCfg>
struct PyTrampoline_frc__ADXL362 : PyTrampolineBase_frc__ADXL362<PyTrampolineBase, PyTrampolineCfg> {
    using PyTrampolineBase_frc__ADXL362<PyTrampolineBase, PyTrampolineCfg>::PyTrampolineBase_frc__ADXL362;

    using Range = frc::Accelerometer::Range;
    static constexpr auto kRange_2G = frc::Accelerometer::Range::kRange_2G;


#ifndef RPYGEN_DISABLE_GetX_v
    double GetX() override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_GetX_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(double), LookupBase,
            "getX", );
        return CxxCallBase::GetX();
    }
#endif

#ifndef RPYGEN_DISABLE_GetY_v
    double GetY() override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_GetY_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(double), LookupBase,
            "getY", );
        return CxxCallBase::GetY();
    }
#endif

#ifndef RPYGEN_DISABLE_GetZ_v
    double GetZ() override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_GetZ_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(double), LookupBase,
            "getZ", );
        return CxxCallBase::GetZ();
    }
#endif

#ifndef RPYGEN_DISABLE_GetAcceleration_TAxes
    double GetAcceleration(frc::ADXL362::Axes axis) override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_GetAcceleration_TAxes;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(double), LookupBase,
            "getAcceleration", axis);
        return CxxCallBase::GetAcceleration(std::move(axis));
    }
#endif

#ifndef RPYGEN_DISABLE_GetAccelerations_v
    ADXL362::AllAxes GetAccelerations() override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_GetAccelerations_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(ADXL362::AllAxes), LookupBase,
            "getAccelerations", );
        return CxxCallBase::GetAccelerations();
    }
#endif

#ifndef RPYGEN_DISABLE_InitSendable_RTNTSendableBuilder
    void InitSendable(nt::NTSendableBuilder& builder) override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_InitSendable_RTNTSendableBuilder;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "initSendable", builder);
        return CxxCallBase::InitSendable(std::forward<decltype(builder)>(builder));
    }
#endif




};

}; // namespace rpygen
