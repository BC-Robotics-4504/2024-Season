
 

// This file is autogenerated. DO NOT EDIT

#pragma once
#include <robotpy_build.h>


#include <../_api_cpp_sim/include/ctre/phoenix/signals/IInvertable.h>





namespace rpygen {

using namespace ctre::phoenix::signals;



template <typename CfgBase = EmptyTrampolineCfg>
struct PyTrampolineCfg_ctre__phoenix__signals__IInvertable :
    CfgBase
{
    using Base = ctre::phoenix::signals::IInvertable;

    using override_base_SetInverted_b = ctre::phoenix::signals::IInvertable;
    using override_base_KGetInverted_v = ctre::phoenix::signals::IInvertable;
};


template <typename PyTrampolineBase, typename PyTrampolineCfg>
struct PyTrampoline_ctre__phoenix__signals__IInvertable : PyTrampolineBase, virtual py::trampoline_self_life_support {
    using PyTrampolineBase::PyTrampolineBase;



#ifndef RPYGEN_DISABLE_SetInverted_b
    void SetInverted(bool invert) override {
        using LookupBase = typename PyTrampolineCfg::Base;
        RPYBUILD_OVERRIDE_PURE_NAME(IInvertable, PYBIND11_TYPE(void), LookupBase,
            "setInverted", SetInverted, invert);
    }
#endif

#ifndef RPYGEN_DISABLE_KGetInverted_v
    bool GetInverted() const override {
        using LookupBase = typename PyTrampolineCfg::Base;
        RPYBUILD_OVERRIDE_PURE_NAME(IInvertable, PYBIND11_TYPE(bool), LookupBase,
            "getInverted", GetInverted, );
    }
#endif




};

}; // namespace rpygen
