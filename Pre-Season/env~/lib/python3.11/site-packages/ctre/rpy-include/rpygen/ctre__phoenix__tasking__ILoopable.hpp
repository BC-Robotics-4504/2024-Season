
 

// This file is autogenerated. DO NOT EDIT

#pragma once
#include <robotpy_build.h>


#include <../_api_cpp_sim/include/ctre/phoenix/tasking/ILoopable.h>





namespace rpygen {

using namespace ctre::phoenix::tasking;



template <typename CfgBase = EmptyTrampolineCfg>
struct PyTrampolineCfg_ctre__phoenix__tasking__ILoopable :
    CfgBase
{
    using Base = ctre::phoenix::tasking::ILoopable;

    using override_base_OnStart_v = ctre::phoenix::tasking::ILoopable;
    using override_base_OnLoop_v = ctre::phoenix::tasking::ILoopable;
    using override_base_IsDone_v = ctre::phoenix::tasking::ILoopable;
    using override_base_OnStop_v = ctre::phoenix::tasking::ILoopable;
};


template <typename PyTrampolineBase, typename PyTrampolineCfg>
struct PyTrampoline_ctre__phoenix__tasking__ILoopable : PyTrampolineBase, virtual py::trampoline_self_life_support {
    using PyTrampolineBase::PyTrampolineBase;



#ifndef RPYGEN_DISABLE_OnStart_v
    void OnStart() override {
        using LookupBase = typename PyTrampolineCfg::Base;
        RPYBUILD_OVERRIDE_PURE_NAME(ILoopable, PYBIND11_TYPE(void), LookupBase,
            "onStart", OnStart, );
    }
#endif

#ifndef RPYGEN_DISABLE_OnLoop_v
    void OnLoop() override {
        using LookupBase = typename PyTrampolineCfg::Base;
        RPYBUILD_OVERRIDE_PURE_NAME(ILoopable, PYBIND11_TYPE(void), LookupBase,
            "onLoop", OnLoop, );
    }
#endif

#ifndef RPYGEN_DISABLE_IsDone_v
    bool IsDone() override {
        using LookupBase = typename PyTrampolineCfg::Base;
        RPYBUILD_OVERRIDE_PURE_NAME(ILoopable, PYBIND11_TYPE(bool), LookupBase,
            "isDone", IsDone, );
    }
#endif

#ifndef RPYGEN_DISABLE_OnStop_v
    void OnStop() override {
        using LookupBase = typename PyTrampolineCfg::Base;
        RPYBUILD_OVERRIDE_PURE_NAME(ILoopable, PYBIND11_TYPE(void), LookupBase,
            "onStop", OnStop, );
    }
#endif




};

}; // namespace rpygen
